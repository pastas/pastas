[build-system]
requires = ["setuptools>=64.0.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "pastas"
dynamic = ["version"]
description = "Pastas is an open-source Python framework for the analysis of groundwater time series."
license = { file = "LICENSE" }
readme = "README.md"
authors = [{ name = "Collenteur et al. 2019" }]
maintainers = [
    { name = "R.A. Collenteur", email = "raoulcollenteur@gmail.com" },
    { name = "M. Bakker", email = "markbak@gmail.com" },
    { name = "R. Calje", email = "r.calje@artesia-water.nl" },
    { name = "F. Schaars", email = "f.schaars@artesia-water.nl" },
    { name = "D.A. Brakenhoff", email = "d.brakenhoff@artesia-water.nl" },
    { name = "O.N. Ebbens", email = "o.ebbens@artesia-water.nl" },
    { name = "M.A. Vonk", email = "vonk.mart@gmail.com" },
]
requires-python = ">= 3.9"
dependencies = [
    "numpy >= 1.22.4",
    "matplotlib >= 3.6.1",
    "pandas >= 2.1",
    "scipy >= 1.8.1, !=1.13.0",
    "numba >= 0.55.2",
]
keywords = ["hydrology", "groundwater", "timeseries", "analysis"]
classifiers = [
    'Development Status :: 5 - Production/Stable',
    'Intended Audience :: Science/Research',
    'Intended Audience :: Other Audience',
    'License :: OSI Approved :: MIT License',
    'Programming Language :: Python :: 3 :: Only',
    'Programming Language :: Python :: 3.9',
    'Programming Language :: Python :: 3.10',
    'Programming Language :: Python :: 3.11',
    'Programming Language :: Python :: 3.12',
    'Topic :: Scientific/Engineering :: Hydrology',
]

[project.urls]
homepage = "https://pastas.dev"
repository = "https://github.com/pastas/pastas"
documentation = "https://pastas.readthedocs.io"

[project.optional-dependencies]
solvers = ["lmfit >= 1.0.0", "emcee >= 3.0"]
latexify = ["latexify-py"]
interactive = ["bokeh", "plotly"]
datasets = ["requests"]
full = ["pastas[latexify,solvers,interactive,datasets]"]
ruffing = ["ruff"]
formatting = ["pastas[ruffing]"]
linting = ["pastas[ruffing]"]
pytesting = ["pytest>=7", "pytest-cov", "pytest-sugar"]
ci = [
    "pastas[pytesting,solvers]",
    "jupyter",
    "coverage",
    "corner",
    "emcee",
    "tqdm",
    "plotly",
    "bokeh >= 3.0",
]
rtd = [
    "pastas[solvers,latexify]",
    "Ipython",
    "ipykernel",
    "pydata-sphinx-theme",
    "sphinx>=3.1, <6.0",
    "sphinxcontrib-bibtex",
    "requests",
    "numpydoc",
    "sphinx-design",
    "myst_nb",
]
dev = ["tox", "pre-commit", "pastas[ruffing,ci,rtd]"]
numbascipy = ["numba-scipy >= 0.3.1"]

[tool.setuptools.dynamic]
version = { attr = "pastas.version.__version__" }

[tool.black]
line-length = 88

[tool.isort]
profile = "black"

[tool.pytest.ini_options]
addopts = "--strict-markers --durations=0"
markers = ["notebooks: run notebooks", "bnotebooks: run benchmark notebooks"]

[tool.tox]
legacy_tox_ini = """
    [tox]
    requires = tox>=4
    env_list = ruff, notebooks, py{39,310,311,312}

    [testenv]
    description = run unit tests
    extras = ci
    commands =
            pytest tests -m "not notebooks and not bnotebooks"

    [testenv:all]
    description = run all unit tests (including Notebooks) and obtain coverage
    extras = ci
    commands =
            coverage run -m pytest tests -m "not bnotebooks"
            coverage xml

    [testenv:notebooks]
    description = run the benchmark notebooks
    extras = ci
    commands =
            pytest tests -m "bnotebooks"

    [testenv:ruff]
    description = run ruff checks
    basepython = python3.10
    extras = ruffing
    commands =
            ruff check --extend-select I --preview
            ruff format --check

    [testenv:ruff_fix]
    description = run ruff locally and fix issues
    extras = ruffing
    commands =
            ruff check --extend-select I --fix
            ruff format

"""
